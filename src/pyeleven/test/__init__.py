"""
Testing the PKCS#11 shim layer
"""
from base64 import b64encode

from flask import json
from retrying import retry

from pyeleven.pk11 import slots_for_label, load_library
from ..utils import mechanism, intarray2bytes
import pkg_resources
import unittest
import logging
import os
import time
from shutil import copyfile, rmtree
import traceback
import subprocess
import tempfile
from .. import pk11
from unittest import TestCase
from .utils import ThreadPool
from threading import Thread
import random

__author__ = 'leifj'


def _find_alts(alts):
    for a in alts:
        if os.path.exists(a):
            return a
    return None


P11_MODULE = _find_alts([
    '/usr/lib/libsofthsm2.so',
    '/usr/lib/softhsm/libsofthsm2.so',
    '/usr/lib/x86_64-linux-gnu/softhsm/libsofthsm2.so'
])
P11_ENGINE = _find_alts(['/usr/lib/engines/engine_pkcs11.so', '/usr/lib/x86_64-linux-gnu/engines-1.1/libpkcs11.so'])
P11_SPY = _find_alts(['/usr/lib/pkcs11/pkcs11-spy.so'])
PKCS11_TOOL = _find_alts(['/usr/bin/pkcs11-tool'])
OPENSC_TOOL = _find_alts(['/usr/bin/opensc-tool'])
SOFTHSM = _find_alts(['/usr/bin/softhsm', '/usr/bin/softhsm2-util'])
OPENSSL = _find_alts(['/usr/bin/openssl'])

if OPENSSL is None:
    raise unittest.SkipTest("OpenSSL not installed")

if SOFTHSM is None:
    raise unittest.SkipTest("SoftHSM not installed")

if OPENSC_TOOL is None:
    raise unittest.SkipTest("OpenSC not installed")

if PKCS11_TOOL is None:
    raise unittest.SkipTest("pkcs11-tool not installed")

if P11_ENGINE is None:
    raise unittest.SkipTest("libengine-pkcs11-openssl is not installed")

p11_test_files = []
softhsm_conf = None
server_cert_pem = None
server_cert_der = None
softhsm_db_1 = None
softhsm_db_2 = None
softhsm_token_dir = None


def disable_tf(fn):
    if os.path.exists(fn):
        try:
            os.rename(fn, "%s.bak" % fn)
        except IOError as ex:
            pass
    else:
        print("%s is gone!" % fn)


def enable_tf(fn):
    fn_old = "%s.bak" % fn
    if os.path.exists(fn_old):
        try:
            os.rename(fn_old, fn)
        except IOError as ex:
            pass


def _tf():
    f = tempfile.NamedTemporaryFile(delete=False)
    p11_test_files.append(f.name)
    return f.name


def _td():
    dirpath = tempfile.mkdtemp()
    p11_test_files.append(dirpath)
    return dirpath


def _p(args):
    env = {}
    if softhsm_conf is not None:
        env['SOFTHSM2_CONF'] = softhsm_conf
        logging.debug("env SOFTHSM2_CONF=%s " % softhsm_conf + " ".join(args))
    logging.info("Running: " + " ".join(args))
    proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)
    out, err = proc.communicate()
    if err is not None and len(err) > 0:
        logging.error(err)
    if out is not None and len(out) > 0:
        logging.debug(out)
    rv = proc.wait()
    if rv:
        raise RuntimeError("command exited with code != 0: %d" % rv)


@unittest.skipIf(P11_MODULE is None, "SoftHSM PKCS11 module not installed")
def setup():
    logging.debug("Creating test pkcs11 token using softhsm")

    try:
        global softhsm_conf
        global softhsm_db_1
        global softhsm_db_2
        global softhsm_token_dir

        softhsm_db_1 = _tf()
        softhsm_db_2 = _tf()
        softhsm_conf = _tf()
        softhsm_token_dir = _td()

        logging.debug("Generating softhsm.conf")
        with open(softhsm_conf, "w") as f:
            f.write("#Generated by pyeleven test\n0:%s\n1:%s\ndirectories.tokendir=%s\n" % (softhsm_db_1, softhsm_db_2,
                                                                                            softhsm_token_dir))
        logging.debug("Initializing the token")
        _p([SOFTHSM,
            '--slot', '0',
            '--label', 'test',
            '--init-token',
            '--pin', 'secret1',
            '--so-pin', 'secret2'])

        private_key_pem = _tf()
        private_key_der = _tf()
        logging.debug("Generating private key (PEM format)")
        _p([OPENSSL,
            'genrsa',
            '-out', private_key_pem,
            '1024'])

        logging.debug("Generating private key (DER format)")
        _p([OPENSSL,
            'rsa',
            '-inform', 'PEM',
            '-outform', 'DER',
            '-in', private_key_pem,
            '-out', private_key_der])

        logging.debug("Importing private key in token")
        _p([PKCS11_TOOL,
            '--module', P11_MODULE,
            '--login',
            '--id', 'a1b2',
            '--label', 'test',
            '--type', 'privkey',
            '--write-object', private_key_der,
            '--pin', 'secret1'])

        logging.debug("Listing objects in token")
        _p([PKCS11_TOOL,
            '--module', P11_MODULE,
            '--login',
            '--pin', 'secret1',
            '--list-objects'])

        global signer_cert_der
        global signer_cert_pem
        signer_cert_pem = _tf()
        openssl_conf = _tf()
        logging.debug("Generating OpenSSL config")
        with open(openssl_conf, "w") as f:
            f.write("""
[req]
distinguished_name = req_distinguished_name

[req_distinguished_name]
                """)

        signer_cert_der = _tf()

        logging.debug("Generating self-signed certificate")
        _p([OPENSSL, 'req',
            '-new',
            '-x509',
            '-subj', "/cn=TestSigner",
            '-config', openssl_conf,
            '-keyform', 'PEM',
            '-key', private_key_pem,
            '-out', signer_cert_pem])

        _p([OPENSSL, 'x509',
            '-inform', 'PEM',
            '-outform', 'DER',
            '-in', signer_cert_pem,
            '-out', signer_cert_der])

        logging.debug("Importing certificate into token")

        _p([PKCS11_TOOL,
            '--module', P11_MODULE,
            '--login',
            '--id', 'a1b2',
            '--label', 'test',
            '--type', 'cert',
            '--write-object', signer_cert_der,
            '--pin', 'secret1'])

        copyfile(softhsm_db_1, softhsm_db_2)

    except Exception as ex:
        traceback.print_exc()
        logging.warning("PKCS11 tests disabled: unable to initialize test token: %s" % ex)


def teardown(self):
    for o in self.p11_test_files:
        if os.path.isfile(o):
            os.unlink(o)
        elif os.path.isdir(o):
            rmtree(o)
    self.p11_test_files = []


class FlaskTestCase(TestCase):
    def setUp(self):
        from .. import app
        os.environ['SOFTHSM2_CONF'] = softhsm_conf
        app.config['TESTING'] = True
        app.config['PKCS11MODULE'] = P11_MODULE
        app.config['PKCS11PIN'] = 'secret1'
        self.app = app.test_client()

    def test_info(self):
        rv = self.app.get("/info")
        assert rv.data
        d = json.loads(rv.data)
        assert d is not None
        assert 'library' in d
        assert d['library'] == P11_MODULE

    def test_sign(self):
        rv = self.app.post("/test/test/sign",
                           content_type='application/json',
                           data=json.dumps(dict(mech='RSAPKCS1', data=b64encode("test"))))
        assert rv.data
        d = json.loads(rv.data)
        assert d is not None
        assert 'slot' in d
        assert 'signed' in d

    def test_bad_sign(self):
        try:
            rv = self.app.post("/test/doesnotexist/sign",
                               content_type='application/json',
                               data=json.dumps(dict(mech='RSAPKCS1', data=b64encode("test"))))
            assert False
        except Exception as ex:
            from traceback import print_exc
            print_exc(ex)
            assert True

    def test_1000_sign(self):
        ts = time.time()
        for i in range(0, 999):
            rv = self.app.post("/test/test/sign",
                               content_type='application/json',
                               data=json.dumps(dict(mech='RSAPKCS1', data=b64encode("test"))))
            assert rv.data
            d = json.loads(rv.data)
            assert d is not None
            assert 'slot' in d
            assert 'signed' in d
        te = time.time()
        print("1000 signatures (http): %2.3f sec (speed: %2.5f s/sig)" % (te - ts, (te - ts) / 1000))

    def test_label_sign(self):
        rv = self.app.post("/test/test/sign",
                           content_type='application/json',
                           data=json.dumps(dict(mech='RSAPKCS1', data=b64encode("test"))))
        assert rv.data
        d = json.loads(rv.data)
        assert d is not None
        assert 'slot' in d
        assert 'signed' in d
        assert d['signed']

    def test_bad_sign_request(self):
        try:
            rv = self.app.post("/0/test/sign",
                               content_type='application/json',
                               data=json.dumps('foo'))
            assert False
        except ValueError:
            pass

    def test_slot_info(self):
        rv = self.app.get("/test")
        assert rv.data
        d = json.loads(rv.data)
        assert d
        assert 'slots' in d
        for nfo in d['slots']:
            assert 'mechanisms' in nfo
            assert 'slot' in nfo
            assert 'token' in nfo
            assert 'manufacturerID' in nfo['slot']
            assert 'SoftHSM' in nfo['slot']['manufacturerID']
            assert 'label' in nfo['token']
            assert 'test' in nfo['token']['label']

    def test_token_info(self):
        rv = self.app.get("/")
        assert rv.data
        d = json.loads(rv.data)
        assert d
        assert 'slots' in d
        assert len(d['slots']) == 2
        assert 1 in d['slots']
        assert 0 in d['slots']
        assert 'labels' in d
        assert 'test' in d['labels']
        test_slots = d['labels']['test']
        assert len(test_slots) == 2
        assert 1 in test_slots
        assert 0 in test_slots

    def test_slot_objects(self):
        rv = self.app.get("/test/objects")
        assert rv.data
        d = json.loads(rv.data)
        assert d
        assert 'session' in d
        assert 'objects' in d
        assert d['objects'] != []


class TestPKCS11(unittest.TestCase):
    def setUp(self):
        datadir = pkg_resources.resource_filename(__name__, 'data')

    def test_open_session(self):
        os.environ['SOFTHSM_CONF'] = softhsm_conf
        pk11.reset()
        with pk11.pkcs11(P11_MODULE, 'test', "secret1") as session:
            assert session is not None

    def test_multislot(self):
        os.environ['SOFTHSM2_CONF'] = softhsm_conf
        pk11.reset()
        lib = load_library(P11_MODULE)
        slots = slots_for_label('test', lib)
        assert 1 in slots
        assert 0 in slots
        assert len(slots) == 2

    def test_find_key(self):
        os.environ['SOFTHSM2_CONF'] = softhsm_conf
        pk11.reset()
        with pk11.pkcs11(P11_MODULE, 'test', "secret1") as si:
            assert si is not None
            key, cert = si.find_key('test')
            assert key is not None
            assert cert is not None

    def test_find_key_spread(self):
        os.environ['SOFTHSM2_CONF'] = softhsm_conf
        pk11.reset()
        hits = {0: 0, 1: 0}

        @retry(stop_max_attempt_number=20)
        def _try_sign():
            with pk11.pkcs11(P11_MODULE, 'test', "secret1") as si:
                assert si is not None
                key, cert = si.find_key('test')
                assert key is not None
                assert cert is not None
                assert si.slot is not None
                hits[si.slot] += 1
                if si.slot == random.choice([0, 1]):
                    raise ValueError("force a retry...")

        for i in range(0, 99):
            _try_sign()

        assert hits[0] > 30
        assert hits[1] > 30

    def test_find_key_by_label(self):
        os.environ['SOFTHSM2_CONF'] = softhsm_conf
        pk11.reset()
        with pk11.pkcs11(P11_MODULE, 'test', "secret1") as si:
            assert si is not None
            key, cert = si.find_key('test')
            assert key is not None
            assert cert is not None

    def test_exception_reopen_session(self):
        os.environ['SOFTHSM2_CONF'] = softhsm_conf
        pk11.reset()
        for i in range(0, 10):
            try:
                with pk11.pkcs11(P11_MODULE, 'test', "secret1") as si:
                    assert si is not None
                    raise ValueError("oops...")
            except ValueError:
                pass

    def test_sign(self):
        os.environ['SOFTHSM2_CONF'] = softhsm_conf
        pk11.reset()
        with pk11.pkcs11(P11_MODULE, 'test', "secret1") as si:
            key, cert = si.find_key('test')
            signed = intarray2bytes(si.session.sign(key, 'test', mechanism('RSAPKCS1')))
            assert signed is not None

    def test_1000_sign(self):
        os.environ['SOFTHSM2_CONF'] = softhsm_conf
        pk11.reset()
        ts = time.time()
        for i in range(0, 999):
            with pk11.pkcs11(P11_MODULE, 'test', "secret1") as si:
                key, cert = si.find_key('test')
                signed = intarray2bytes(si.session.sign(key, 'test', mechanism('RSAPKCS1')))
                assert signed is not None
        te = time.time()
        print("1000 signatures (p11): %2.3f sec (speed: %2.5f sec/s)" % (te - ts, (te - ts) / 1000))

    def test_stress_sign_sequential(self):
        os.environ['SOFTHSM2_CONF'] = softhsm_conf
        pk11.reset()

        def _sign(msg):
            with pk11.pkcs11(P11_MODULE, 'test', "secret1") as si:
                key, cert = si.find_key('test')
                signed = intarray2bytes(si.session.sign(key, msg, mechanism('RSAPKCS1')))
                assert signed is not None

        for i in range(0, 999):
            _sign("message %d" % i)

    def test_stress_sign_parallell_20(self):
        os.environ['SOFTHSM2_CONF'] = softhsm_conf
        pk11.reset()

        def _sign(msg):
            with pk11.pkcs11(P11_MODULE, 'test', "secret1") as si:
                key, cert = si.find_key('test', find_cert=False)
                signed = intarray2bytes(si.session.sign(key, msg, mechanism('RSAPKCS1')))
                assert signed is not None

        ts = time.time()
        tp = ThreadPool(20)
        for i in range(0, 999):
            tp.add_task(_sign, "message %d" % i)
        tp.wait_completion()
        te = time.time()
        print "1000 signatures (p11 parallell): %2.3f sec (speed: %2.5f sec/s)" % (te - ts, (te - ts) / 1000)

    def test_stress_sign_parallell_20_with_failovers(self):
        os.environ['SOFTHSM2_CONF'] = softhsm_conf
        pk11.reset()

        @retry(stop_max_attempt_number=10)
        def _sign(i):
            msg = "message %d" % i
            with pk11.pkcs11(P11_MODULE, 'test', "secret1") as si:
                key, _ = si.find_key('test', find_cert=False)
                signed = intarray2bytes(si.session.sign(key, msg, mechanism('RSAPKCS1')))
                assert signed is not None

        ts = time.time()
        tp = ThreadPool(20)
        for i in range(0, 999):  # simulate 10 failures on each slot
            tp.add_task(_sign, i)
        tp.wait_completion()
        te = time.time()
        print "1000 signatures (p11 parallell): %2.3f sec (speed: %2.5f sec/s)" % (te - ts, (te - ts) / 1000)